{
  "hash": "91da70a99e4817b538d3f7cceff7042f",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Use WebR in your existing quarto website\"\ndescription: |\n  You might get stuck when you try to add the trending `webR` to quarto extension in your website. This is one way to fix it.\nauthor: \"Chi Zhang\"\ndate: \"2023-10-01\"\ncategories: [Quarto, Website]\nsidebar: false\nengine: knitr\nfilters: \n  - webr\nwebr:\n  channel-type: \"post-message\"\nformat: \n  html:\n    toc: true\n    toc-depth: 2\n    code-fold: false\n    code-tools: false\n---\n\n**WebR** is the new hot topic in the R community. Coupled with **Quarto**, you can run R code interactively in a web browser. This is achieved with the great quarto extension, [quarto-webr](https://github.com/coatless/quarto-webr) developed by James J Balamuta. \n\nIn the [positconf 2023 talk](https://assets.thecoatlessprofessor.com/talks/quarto-webr-posit-conf-23-talk.pdf), [documentation](https://github.com/coatless/quarto-webrhttps://github.com/coatless/quarto-webr) and [YouTube](https://www.youtube.com/watch?v=DoRR2S5lLvk), James introduced how to make a webR empowered quarto document. It is simple enough, and you can make it work quite smoothly.\n\n## When your render gets stuck\n\nBut there is a twist. This works perfectly fine with a new quarto project, where no **output-dir** is specified yet. When I tried to replicate the same thing for my existing quarto website (with `output-dir: docs` so that I could deploy it with GitHub Pages), my rendered html file got stuck: \n\n![](fig1_webr_fail.png)\n\nIf you read the [troubleshooting](https://quarto-webr.thecoatlessprofessor.com/qwebr-troubleshooting.html) documentation, you'll see that it's a problem with the two `js` files. This agrees with what Rstudio Background Jobs tells us. \n\n![](fig2_render_msg.png)\n\nI moved the two files (manually..) around, then render again, nothing changed.\n\n### Solution: set `channel-type` option\n\nThis is a solution provided by the authors, although I don't quite understand what it did, but it did the magic. (Thanks to Linh's help!)\n\nThis is where you specify this option. \n\n![](fig3_yml.png)\n\nRender again, now it works! WebR status turns green, and I can run code interactively in the browser.\n\n# Summarize the workflow\n\nThe workflow to add the `quarto-webR` extension to your existing quarto website is almost identical as adding it to a new project: \n\n### 1. Install\n\nInstall the extension by running this line in the terminal (for the **current project**)\n\n```\nquarto add coatless/quarto-webr\n```\n\n### 2. Configure\n\nConfigure the YAML header for `your_demo.qmd`\n\n```\ntitle: \"Your demo\"\nengine: knitr\nformat: html\nfilters: \n  - webr\nwebr: \n  channel-type: \"post-message\"\n```\n\nImportant bits: \n\n* specify **engine** to `knitr`\n* specify **filters** to `- webr`. This could alternatively be specified in the overall `_quarto.yml` file to apply to every qt document.\n* add `channel-type: \"post-message\"` under **webr**. No dash in front. \n\n### 3. Execute\n\nNow use the curly bracket `{webr-r}` for your code chunk (which used to be just `{r}`),\n\n```{webr-r}\n1+1\n```\n\n\nA histogram that changes every time you click `RUN CODE`. This proves that we are running interactively the R code inside the web browser.\n\n```{webr-r}\nx <- rnorm(100, 0, 1)\nhist(x, main = 'Histogram of 100 data points')\n```\n\n\n\n\n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}