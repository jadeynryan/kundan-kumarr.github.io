{
  "hash": "8cbd1f48affaa2daa684ad8c2f879a56",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"R package workflow\"\ndescription: |\n  A step-to-step guide to make CRAN-worthy R packages\nauthor: \"Chi Zhang\"\ndate: \"2023-05-19\"\ncategories: [Rpkg, RSE]\nsidebar: false\nformat: \n  html:\n    toc: true\n    toc-depth: 2\n    code-fold: false\n    code-tools: false\n    highlight-style: ayu\n    linestretch: 1.7\n---\n\n\n\n\n\nThis checklist is being updated over time. Mostly for my own use; but great if it helps you as well!\n\nFor a complete treatment, please refer to [R Packages (2e)](https://r-pkgs.org) by Hadley Wickham and Jennifer Bryan.\n\n\n::: {.callout-note}\n## Overview of my current workflow\n\n* initialize project, edit `DESCRIPTION`, search and replace with your package name\n* create package planning documentation, put inside `dev/`\n* create a minimal function with documentation, test and vignette\n* build package, check\n* create data related files and documentation\n* build pkgdown website\n* build package, check\n* push to github, deploy pkgdown website\n* github action configure lifecycle and R CMD check\n\n:::\n\n# Start building your package \n\nThe `usethis` package will help with the procedure when you do not have a package yet. \n\nYou can also create a template, and copy paste from it in the future.\n\n## Initialize the project\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nusethis::create_package('path_to_pkg/pkgname') \n```\n:::\n\n\n\n\nIt opens a new R project (directory) named `pkgname`, with the following items: \n\n* `DESCRIPTION`\n* `NAMESPACE`\n* directory `R/`\n* `.Rbuildignore` and `.gitignore`\n* and the project icon, `pkgname.Rproj`. \n\nIf you have an **existing R project** but wish to build a package there, copy everything but `pkgname.Rproj`, and modify the files in your existing pkg directory. Pay extra attention to the hidden files like `.Rbuildignore`. \n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nusethis::use_mit_license() # modify name to yours\nusethis::use_readme_md() # if you do not have this already\nusethis::use_news_md()\nusethis::use_test()\n\n# create a folder for future data documentation\nx <- 1 \nusethis::use_data() \n```\n:::\n\n\n\n\nIn addition, URL and bug reports should be added in the `DESCRIPTION`. \n\n\n## Planning\n\nIt is good practice to start with planning the package, rather than directly start coding.\n\nCreate a folder called `dev`. To prevent it from being built, add the following line in `.Rbuildignore`\n\n\n\n## Write, test and document\n\nCreate exported functions in `R/`, development code in `script/` (or somewhere else, such as `dev/`).\n\n\n\n### Data: raw and processed\n\nNeed to be clear in mind where the data files go. There are a few data related folders: \n\n* **raw data** files, in the format of excel sheets or csv. Usually placed as `inst/data_name.csv`\n* R scripts to **process the raw data** so that we create data object inside the package, put inside `data-raw`\n* **data objects** that can be called as `pkg::data_name`, are placed in `data`. These files are usually directly generated by executing `write.rda()`. \n* data **documentation**, usually placed in `R/data_documentation.R`. These are Roxygen2 documents for the data.\n\n\n\n\n### Documentation\n\nYou need to configure the **Build tools**. \n\nThese three things should be done:\n\n#### Function documentation\n\nCreate a function `f1`, and put your cursor on it. Go to *Code -> Insert Roxygen Skeleton* to create the template. \n\nAlternatively, use `#'` to start. \n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#' A simple placehold function \n#'\n#' @param x a numeric value\n#'\n#' @return a value 3 greater than the input\n#' @export\n#'\n#' @examples \n#' f1(5)\nf1 <- function(x){\n  x+3\n}\n```\n:::\n\n\n\n\n#### Data documentation\n\nIt can be beneficial to create a separate file to document data only, say `data_documentation.R` under the `R/` directory.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#' Placeholder data x\n#'\n#' This dataset contains one value, x\n#'\n#' @format\n#' \\describe{\n#' \\item{x}{The placeholder data x}\n#' }\n#' @examples\n#' print(x)\n\"x\"\n```\n:::\n\n\n\n\n\n#### Vignette documentation\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nusethis::use_vignette('your_vignette')\n```\n:::\n\n\n\n\n#### Deploy to `pkgdown`\n\nCheck this reference [here](https://chizapoth.github.io/blog/technotes_20230220_pkgdown/)\n\n\n\n## Build package and check\n\nIt is possible that your checks don't pass on the first try. \n\n\n### What to ignore when build?\n\n```\n^.*\\.Rproj$\n^\\.Rproj\\.user$\n^dev$\n^_pkgdown\\.yml$\n^license\\.md$\nMakefile\ndata-raw\ncran-comments.md\n^\\.github$\n```\n\n\n\n\n\n# Don't forget to check these!\n\nThese aspects are quite important to check as well: documentation, code quality, exceptions among others.\n\n* [Slides by Indrajeet Patil](https://indrajeetpatil.github.io/preventive-r-package-care/#/preventive-care-for-r-packages). \n* [Awesome R Package Development Tools by Indrajeet Patil](https://indrajeetpatil.github.io/awesome-r-pkgtools/#codedocument-formatting)\n\n### Documentation \n\n#### Sufficient, working examples \n\n* `README.md`\n* Help pages \n* Vignettes\n\nExample code coverage, `covr::package_coverage()`, use **GHA workflow** to check if code coverage is above a threshold.\n\nDetect broken `README` examples by generating `README.md` on every commit.\n\nIn help pages, some examples have tags:\n\n* `\\dontrun{}`: not run by `example()`, not run by `R CMD check`\n* `\\donttest{}`: run by `example()` but not checked\n* `\\dontshow{}`: run and checked\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# code coverage\ncovr::package_coverage(type = c('examples', 'vignettes'), commentDonttest = F, commentDontrun = F)\n\n# readme examples\nrmarkdown::render(\"README.rmd\", output_format = rmarkdown::github_document())\n\n# help page examples\ndevtools::run_examples(run_dontrun = T, run_donttest = T)\n\n# check vignette examples\npkgdown::build_site()\n```\n:::\n\n\n\n\n\n#### Links and spelling errors \n\nDetect link rot with `urlchecker::url_check()`\n\nSpelling, check with `spelling::spell_check_package()` or `usethis::use_spell_check()`.\n\n* specify prefered standard in `DESCRIPTION`\n* create a list of allowed misspelt words, put it under inst.\n\n\n### Handling exceptions\n\nError > warning > message\n\n\n### Code quality\n\nStyle guide, `styler::style_pkg()` enforces tidyverse style guide.\n\nLint (code smells). Can be removed with `styler` \n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# code quality assessment\nlint(text = 'x = 1') # with lint\nlint(text = 'x <- 1') # no lint\nlintr::lint_package()\n```\n:::\n\n\n\n\n\n\n\n\n\n# CRAN Submission\n\n### Final checks\n\nWhen you are *almost* ready to submit your package to CRAN, you need to do a few checks. \n\nA good practice is to **check while you build** your package, so that you've already fixed most of the problems by the time you do the final check.\n\nThese are a few final checks to do. \n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# spell check\ndevtools::spell_check()\n\n# windows check\ndevtools::check_win_devel()\n\n# rhub cran check \nrhub::check_for_cran()\n```\n:::\n\n\n\n\n\nRemember to check your email and fix potential problems! Some problems pop up in different places, so make sure you fix as many as possible. \n\n### Submit \n\nThere are a few ways to submit. I found this one to be the most convenient way: \n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndevtools::release()\n```\n:::\n\n\n\n\nIt asks a few questions to remind you whether all the checks havve passed, and whether you've updated the relevant information in `DESCRIPTION`, `NEWS`. In the end, it creates a tar ball and submits automatically to CRAN.\n\nYou need to check your email to confirm submission, just like when you do it manually via the webform.\n\nAlternatively, you can either \n\n* write `R CMD build PKGNAME` in the terminal; \n* in Rstudio, in `Build` tab select build binary. \n\nAfterwards, submit manually via the webform. \n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}